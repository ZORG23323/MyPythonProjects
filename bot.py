import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Router, types
from aiogram.types import Message
import aiohttp

router = Router()

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /deepseek
@router.message(commands=['deepseek'])
async def handle_deepseek_request(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    prompt = message.text.split('/deepseek', 1)[-1].strip()
    
    if not prompt:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /deepseek\n–ü—Ä–∏–º–µ—Ä: /deepseek –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò?")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ DeepSeek API
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer YOUR_DEEPSEEK_API_KEY",
                "Content-Type": "application/json"
            }
            
            payload = {
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "model": "deepseek-chat"
            }

            async with session.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    answer = data['choices'][0]['message']['content']
                    await message.answer(answer)
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç—Ö–æ-—Ö–µ–Ω–¥–ª–µ—Ä
@router.message()
async def echo_message(message: Message):
    await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "7587958511:AAEcNhrHMcnA2jjTQdcZ7ksBJAfaeKXGRbI"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç ü§ñ. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer("–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã: \n/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ \n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")

# –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def echo_message(message: Message):
    await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())